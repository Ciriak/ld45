{"version":3,"file":"Choice.js","sourceRoot":"","sources":["../src/Choice.ts"],"names":[],"mappings":"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","sourcesContent":["import IChoice from \"./interface/Choice\";\r\nimport { Db } from \"mongodb\";\r\nconst Filter = require('bad-words');\r\nimport moment from \"moment\";\r\nimport { rejects } from \"assert\";\r\nconst filter = new Filter();\r\nexport default class Choice implements IChoice {\r\n    optionLabel: string;\r\n    label: string;\r\n    options: IChoice[];\r\n    id: string;\r\n    parentId: string;\r\n    ip: string;\r\n    date: Date;\r\n    imageUrl: string;\r\n    private database: Db;\r\n\r\n    constructor(req: any, database: Db, ) {\r\n        this.database = database;\r\n        if (req && req.query && req.query.id) {\r\n            this.id = req.query.id;\r\n        }\r\n        else {\r\n            this.id = \"default\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieve the infos about the choice\r\n     */\r\n    async get() {\r\n        return new Promise<IChoice>(async (resolve, reject) => {\r\n            const collection = this.database.collection('choices');\r\n            collection.findOne({\r\n                id: this.id\r\n            }).then(async (result) => {\r\n\r\n                if (!result) {\r\n                    throw new Error(`Choice '${this.id}' not found`);\r\n                }\r\n\r\n                // retrieve the main infos\r\n                this.id = result.id;\r\n                this.label = result.label;\r\n                this.optionLabel = result.optionLabel;\r\n                this.imageUrl = result.imageUrl;\r\n\r\n                // retrieve the options\r\n                const optionsQuery = {\r\n                    parentId: this.id\r\n                }\r\n                collection.find(optionsQuery).limit(3).toArray((err, results) => {\r\n                    if (err) {\r\n                        throw err;\r\n                    }\r\n\r\n                    this.options = results;\r\n\r\n                    resolve(this.asReadableObject());\r\n                });\r\n\r\n\r\n            }).catch((err) => reject(err))\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new choice\r\n     */\r\n    async post(req: any) {\r\n        return new Promise<any>(async (resolve, reject) => {\r\n            const collection = this.database.collection('choices');\r\n\r\n\r\n            try {\r\n                this.validateChoicePost(req);\r\n                await this.ensureParentExist();\r\n                await this.checkForSpam();\r\n            } catch (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n\r\n            const query: any = {\r\n                id: this.id,\r\n                label: this.label,\r\n                optionLabel: this.optionLabel,\r\n                options: [],\r\n                date: this.date,\r\n                ip: this.ip,\r\n                parentId: this.parentId,\r\n                imageUrl: this.imageUrl\r\n\r\n            }\r\n\r\n            const result = await collection.insertOne(\r\n                query\r\n            );\r\n\r\n            if (result && result.insertedCount === 1) {\r\n                resolve(query);\r\n            }\r\n            else {\r\n                reject(new Error(\"Error while inserting the new choice\"));\r\n            }\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Return the choice as a parsed result\r\n     */\r\n    private asReadableObject(): IChoice {\r\n\r\n        const options: IChoice[] = [];\r\n        for (let optionIndex = 0; optionIndex < this.options.length; optionIndex++) {\r\n            const option = this.options[optionIndex];\r\n            options.push({\r\n                id: option.id,\r\n                label: option.label,\r\n                optionLabel: option.optionLabel,\r\n                imageUrl: option.imageUrl\r\n            });\r\n        }\r\n\r\n        return {\r\n            id: this.id,\r\n            parentId: this.parentId,\r\n            label: this.label,\r\n            optionLabel: this.optionLabel,\r\n            options: options,\r\n            imageUrl: this.imageUrl\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check and validate the data of a choice post\r\n     * @param req \r\n     */\r\n    private validateChoicePost(req: any) {\r\n\r\n        const query = req.query;\r\n        if (!query) {\r\n            throw new Error(\"Missing query parameter\");\r\n        }\r\n\r\n        if (!query.label) {\r\n            throw new Error(\"Missing label parameter\");\r\n        }\r\n\r\n        if (!query.optionLabel) {\r\n            throw new Error(\"Missing optionLabel parameter\");\r\n        }\r\n\r\n        if (query.optionLabel.length < 5 || query.label.length < 5 || query.optionLabel.length > 200 || query.label.length > 200) {\r\n            throw new Error(\"All the text must be between 5 and 200 characters\");\r\n        }\r\n        // query.optionLabel.substr(0, 2).toLowerCase() === \"i \"\r\n\r\n        // check if first person\r\n        if (query.optionLabel.substr(0, 2).toLowerCase() !== \"i \") {\r\n            throw new Error(\"Please only use first person ('I ...') to describe what you do\");\r\n        }\r\n\r\n        if (!query.parentId) {\r\n            throw new Error(\"Missing parent id\");\r\n        }\r\n\r\n        // clean option label from common mistake\r\n        query.optionLabel = query.optionLabel.replace(\"I I\", \"I\").replace(\"I i\", \"I\");\r\n\r\n\r\n        this.optionLabel = filter.clean(query.optionLabel);\r\n        this.parentId = query.parentId;\r\n        this.label = filter.clean(query.label);\r\n        this.id = ID();\r\n        this.imageUrl = query.imageUrl;\r\n        this.ip = req.ip;\r\n        this.date = new Date();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Ensure that the parent of the current choice exist\r\n     */\r\n    private async ensureParentExist() {\r\n        return new Promise<IChoice>(async (resolve, reject) => {\r\n            const collection = this.database.collection('choices');\r\n            const parent = await collection.findOne({\r\n                id: this.parentId\r\n            });\r\n\r\n            if (!parent) {\r\n                reject(new Error(`Unable to find the parent '${this.parentId}'`));\r\n                return;\r\n            }\r\n            resolve();\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Check if the ip has been used too many time recently\r\n     */\r\n    private async checkForSpam() {\r\n        return new Promise<IChoice>(async (resolve, reject) => {\r\n            const collection = this.database.collection('choices');\r\n\r\n            const date = moment(new Date()).subtract(2, 'minutes').toDate();\r\n\r\n            collection.find({\r\n                ip: this.ip,\r\n                date: {\r\n                    $gte: date\r\n                }\r\n            }).toArray((err, results) => {\r\n\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                if (results.length > 3) {\r\n                    reject(new Error(\"Wow you added a lot of entries ! Please try again in 2 minutes\"));\r\n                    return;\r\n                }\r\n\r\n\r\n\r\n                resolve();\r\n\r\n\r\n            });\r\n\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nvar ID = function () {\r\n    // Math.random should be unique because of its seeding algorithm.\r\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n    // after the decimal.\r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n};"]}
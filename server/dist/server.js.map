{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\nimport express from \"express\";\r\nimport { readJsonSync } from \"fs-extra\";\r\nimport { MongoClient, Db } from \"mongodb\";\r\nimport { join } from \"path\";\r\nimport \"./config.default.json\";\r\nimport Choice from \"./Choice.js\";\r\nimport IApiResponse from \"./interface/ApiResponse.js\";\r\n\r\nconst config = retrieveConfig();\r\n\r\nconst dbUrl = config.databaseUrl;\r\nconst hostname = config.hostname;\r\nconst port = process.env.PORT || config.port;\r\n\r\nconst app = express();\r\nconst router = express.Router();\r\n\r\nconnectDoDatabase();\r\n\r\nfunction retrieveConfig() {\r\n    let config;\r\n    try {\r\n        config = readJsonSync(join(__dirname, \"config.json\"));\r\n\r\n    } catch (error) {\r\n        console.warn(\"Unable to find config, using default\");\r\n        config = readJsonSync(join(__dirname, \"config.default.json\"));\r\n    }\r\n\r\n    console.log(\"Config retrieved\");\r\n    return config;\r\n}\r\n\r\n// allow cors\r\napp.use(function (req, res, next) {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n    next();\r\n});\r\n\r\nasync function connectDoDatabase() {\r\n    const client = await new MongoClient(dbUrl, {\r\n        useNewUrlParser: true,\r\n        useUnifiedTopology: true,\r\n        autoReconnect: true\r\n    }).connect();\r\n\r\n    client.on('close', () => {\r\n        console.log('-> lost connection');\r\n        console.log(\"Trying to reconnect in 30 secondes\");\r\n        setTimeout(() => {\r\n            connectDoDatabase();\r\n        }, 30000);\r\n    });\r\n\r\n    const db = client.db(\"missing-entry\");\r\n    console.log(\"Connected to the database\");\r\n    initApi(db);\r\n    ensureFirstChoiceExist(db);\r\n\r\n}\r\n\r\n/**\r\n * Ensure that the first choice exist or else nothing will work\r\n * @param db \r\n */\r\nasync function ensureFirstChoiceExist(db: Db) {\r\n    const collection = db.collection('choices');\r\n    const defaultChoice = await collection.findOne({\r\n        id: \"default\"\r\n    });\r\n\r\n\r\n    if (!defaultChoice) {\r\n\r\n        console.warn(\"Missing default choice, it will be created\")\r\n\r\n        const query = {\r\n            id: \"default\",\r\n            date: new Date(),\r\n            label: \"I start with nothing\",\r\n            optionLabel: \"\",\r\n            parentId: \"\"\r\n        }\r\n        collection.insertOne(\r\n            query\r\n        );\r\n        console.log(\"Inserted a new default choice \");\r\n    }\r\n}\r\n\r\nfunction initApi(db: Db) {\r\n    router.route('/choice')\r\n        .get(async function (req, res) {\r\n            const choice = new Choice(req, db);\r\n            try {\r\n                const data = await choice.get();\r\n                res.json(data);\r\n            } catch (error) {\r\n                let errorResponse: IApiResponse;\r\n\r\n                errorResponse = {\r\n                    statusCode: 500,\r\n                    status: \"error\",\r\n                    data: {\r\n                        message: error.message,\r\n                    }\r\n                }\r\n\r\n                res.json(errorResponse);\r\n            }\r\n\r\n        }).post(async function (req, res) {\r\n            const choice = new Choice(req, db);\r\n            try {\r\n                const data = await choice.post(req);\r\n                res.json(data);\r\n            } catch (error) {\r\n                let errorResponse: IApiResponse;\r\n\r\n                errorResponse = {\r\n                    statusCode: 500,\r\n                    status: \"error\",\r\n                    data: {\r\n                        message: error.message,\r\n                    }\r\n                }\r\n\r\n                res.json(errorResponse);\r\n            }\r\n        });\r\n\r\n\r\n    app.use(router);\r\n\r\n    // DÃ©marrer le serveur \r\n    app.listen(port, hostname, function () {\r\n        console.log(\"Server listening on http://\" + hostname + \":\" + port);\r\n    });\r\n}"]}